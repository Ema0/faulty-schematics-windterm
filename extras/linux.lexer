//WindTerm Linux Lexer
//Version: 1.0
{
	"name": "Linux (General)",
	"scopeName": "source.linux",
	"patterns" : [
		{
			"begin": "(*UTF)(?x)(?m)^
						(?![-+])
						(?=[^\\n\\$#%\\x{e0b0}]*+[\\$#%\\x{e0b0}])
						[\\ \\t]*+\\S?
						(?:[^\\n\\$#%]*+([\\$#]|(?<!\\s\\d{3}|\\s\\d{2}|\\s\\d)%)|[^\\n]*?\\x{e0b0})
						(?=\\ )",
			"captures": {
				"1": {
					"name": "sign.directive.prompt.linux"
				}
			},
			"end": "\\n",
			"name": "prompt.line.linux",
			"patterns": [
				{
					"include": "#command"
				},
				{
					"include": "#option"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#string"
				},
				{
					"include": "#ip"
				},
				{
					"include": "#path"
				},
				{
					"include": "#number"
				}
			]
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#permissions"
		},
		{
			"include": "#option"
		},
		{
			"include": "#operator"
		},
		{
			"include": "#string"
		},
		{
			"include": "#ip"
		},
		{
			"include": "#mac"
		},
		{
			"include": "#datetime"
		},
		{
			"include": "#number"
		}
	],
	"repository": {
		"command": {
			"match": "(*UTF)(?-m)(?<=[\\|#\\$\\x{e0b0}])[ \\t]{0,99}(?!\\d++\\.)([\\w\\.-]++)(?=$|\\s)",
			"captures": {
				"1": {
					"name": "support.function.linux"
				}
			}
		},
		"datetime": {
			"patterns": [
				{
					"match": "\\b\\d{4}[/-]\\d{1,2}[/-]\\d{1,2}(?:[ T]\\d{1,2}(?::\\d{2}){1,2}(?:\\.\\d+)?Z?(?: (GMT))?)?\\b",
					"name": "markup.heading.linux",
					"captures": {
						"1": {
							"name": "token.warn-token.linux"
						}
					}
				},
				{
					"match": "\\b\\d{1,2}[/-]\\d{1,2}[/-]\\d{2}(?:\\d{2})?\\b",
					"name": "markup.heading.linux"
				},
				{
					"match": "\\b\\d{8}T\\d{6}Z?\\b",
					"name": "markup.heading.linux"
				},
				{
					"match": "\\b\\d{1,2}(?::\\d{2}){1,2}(?:\\.\\d+)?(?: (?:(AM|GMT)|(PM)))?\\b",
					"name": "markup.heading.linux",
					"captures": {
						"1": {
							"name": "token.warn-token.linux"
						},
						"2": {
							"name": "token.info-token.linux"
						}
					}
				},
				{
					"match": "(?i)\\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sept?|Oct|Nov|Dec)\\b",
					"name": "markup.heading.linux"
				},
				{
					"match": "(?i)\\b(Mon|Tues?|Wed|Thur?|Fri|Sat|Sun)\\b",
					"name": "markup.heading.linux"
				}
			]
		},
		"ip": {
			"match": "(?x)(?i)(?<X>[a-f0-9]{1,4}){0}\\b(
					  (([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}([01]?\\d\\d?|2[0-4]\\d|25[0-5])
					| ::(\\g<X>:){0,6}\\g<X>
					| (\\g<X>:){1,1}(:\\g<X>){1,6}
					| (\\g<X>:){1,2}(:\\g<X>){1,5}
					| (\\g<X>:){1,3}(:\\g<X>){1,4}
					| (\\g<X>:){1,4}(:\\g<X>){1,3}
					| (\\g<X>:){1,5}(:\\g<X>){1,2}
					| (\\g<X>:){1,6}(:\\g<X>){1,1}
					| (\\g<X>:){1,7}:
					| (\\g<X>:){7,7}( \\g<X>){1,1}
					)\\b",
			"name": "markup.heading.linux"
		},
		"keyword": {
			"patterns": [
				{
					"match": "(?i)\\b(bad|cannot( \\w++)?|denied|deprecated|disabled|errors?|fail(ed)?|failure|false|important|incorrect|invalid|no( \\w++)?|none|((do|does|can|will|could|should|would) )?not|(do|does|ca|wo|could|should|would)n't|refused|unknown|unsupported|warning|wrong)\\b",
					"name": "token.error-token.linux"
				},
				{
					"match": "(?i)\\b(can( \\w++)?|correct(ly)?|known|ok|pass(ed)?|success(ful(ly)?)?|supported|true|yes|valid)\\b",
					"name": "token.success-token.linux"
				},
				{
					"match": "(?i)\\b(warn(ing)?|closed|exited|disconnected|skipped|stopped|sudo|terminated)\\b",
					"name": "token.warn-token.linux"
				},
				{
					"match": "(?i)\\b(debug)\\b",
					"name": "token.debug-token.linux"
				},
				{
					"match": "(?i)\\b(access|any|authentication|connection|disconnection|info|login|operation|password|permission)\\b",
					"name": "token.info-token.linux"
				}
			]
		},
		"mac": {
			"match": "(?i)\\b((([a-f0-9]{2}:){5}|([a-f0-9]{2}-){5})[a-f0-9]{2})\\b",
			"name": "markup.heading.linux"
		},
		"number": {
			"patterns": [
				{
					"match": "(?<!\\w)(?<![_\\d\\.])(?<!\\S-)\\d++(\\.\\d++)*+(e[+-]\\d++)?%?(?![_-])(?=\\b|\\s)",
					"name": "constant.numeric.linux"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"match": "[=:;|\\?\\*\\$<>&+-]",
					"name": "punctuation.definition.delimiter.linux"
				},
				{
					"match": "[()\\[\\]{}]",
					"name": "punctuation.definition.block.linux"
				}
			]
		},
		"option": {
			"patterns": [
				{
					"match": "(?<=[\\[\\|])(--?\\w[-\\w]*+)\\b",
					"name": "variable.language.linux"
				},
				{
					"match": "(?<=\\s)(?:--?)\\w[-\\w]*+(?:(=)(\\w++))?\\b",
					"name": "variable.language.linux",
					"captures": {
						"1": {
							"name": "meta.diff.linux"
						},
						"2": {
							"name": "token.info-token.linux"
						}
					}
				}
			]
		},
		"path": {
			"match": "(?<n>[\\x21-\\x2e\\x30-\\xff\\._-]++){0}(/\\g<n>/?|\\g<n>/)(\\g<n>/?)*+",
			"name": "entity.name.filename.find-in-files.linux"
		},
		"permissions": {
			"begin": "(?=[bcCdDlMnpPs\\?-]([rw-]{2}[xsStT-]){3}[\\.\\+]? )(?<=\\s)",
			"end": "(?= )",
			"patterns": [
				{
					"include": "operator"
				},
				{
					"match": "[bcdlp]",
					"name": "token.debug-token.linux"
				},
				{
					"match": "r",
					"name": "token.info-token.linux"
				},
				{
					"match": "w",
					"name": "token.warn-token.linux"
				},
				{
					"match": "[xsStT]",
					"name": "token.error-token.linux"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"begin": "(['\"])",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.linux"
						}
					},
					"end": "(?=\r|\n)|\\1",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.linux"
						}
					},
					"name": "string.quoted.double.linux",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						}
					]
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "(?x)\\\\ (\n\\\\             |\n[abefnprtv'\"?]   |\n[0-3]\\d{0,2}     |\n[4-7]\\d?        |\nx[a-fA-F0-9]{0,2} |\nu[a-fA-F0-9]{0,4} |\nU[a-fA-F0-9]{0,8} )",
					"name": "constant.character.escape.linux"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape.linux"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "(?x) %\n(\\d+\\$)?                           # field (argument #)\n[#0\\- +']*                          # flags\n[,;:_]?                              # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?          # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?    # precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]           # conversion type",
					"name": "constant.other.placeholder.linux"
				},
				{
					"match": "(%)(?!\"\\s*(PRI|SCN))",
					"captures": {
						"1": {
							"name": "invalid.illegal.placeholder.linux"
						}
					}
				}
			]
		}
	}
}
